#Day4

Q8.Increasign triplet Subsequence
Given an integer array nums, return true if there exists a triple of indices (i, j, k) such that i < j < k and nums[i] < nums[j] < nums[k]. If no such indices exists, return false.

 

Example 1:

Input: nums = [1,2,3,4,5]
Output: true
Explanation: Any triplet where i < j < k is valid.
Example 2:

Input: nums = [5,4,3,2,1]
Output: false
Explanation: No triplet exists.
Example 3:

Input: nums = [2,1,5,0,4,6]
Output: true
Explanation: The triplet (3, 4, 5) is valid because nums[3] == 0 < nums[4] == 4 < nums[5] == 6.
 

Constraints:

1 <= nums.length <= 5 * 105
-231 <= nums[i] <= 231 - 1

Java Code solution :
class Solution {
    public boolean increasingTriplet(int[] nums) {


        int n =nums.length;
        if (n<3){
            return false ;

        }
        int[] leftmin=new int[n];
        leftmin[0]=nums[0];
        for(int i=1;i<n;i++){
            leftmin[i]=Math.min(leftmin[i-1],nums[i]);
        }

        int[] rightmax=new int[n];
        rightmax[n-1]=nums[n-1];
        for(int i=n-2;i>=0;i--){
            rightmax[i]=Math.max(rightmax[i+1],nums[i]);
        }

        for(int i=0;i<n;i++){
            if(leftmin[i]<nums[i] && nums[i]<rightmax[i]){
                return true ;
            }
        
        }
        return false;
    }

}
